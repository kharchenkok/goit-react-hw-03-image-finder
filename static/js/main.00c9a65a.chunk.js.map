{"version":3,"sources":["components/searchbar/SearchForm.js","components/searchbar/Searchbar.js","components/services/GetFetch.js","components/loader/Loader.js","components/imageGalleryItem/ImageGalleryItem.js","components/imageGallery/ImageGallery.js","components/button/Button.js","components/modal/Modal.js","App.js","index.js"],"names":["SearchForm","state","inputValue","handleInput","event","setState","target","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","onChange","autoComplete","autoFocus","placeholder","Component","Searchbar","propTypes","PropTypes","func","isRequired","GetFetch","query","page","itemsPerPage","axios","get","process","then","resp","data","hits","map","id","webformatURL","largeImageURL","error","console","log","defaults","baseURL","Spinner","color","height","width","timeout","ImageGalleryItem","image","setLargeImage","src","alt","onClick","ImageGallery","images","key","uuidv4","Button","loadMore","ModalImage","handleClick","dataset","name","onClose","handleKey","code","window","addEventListener","data-name","App","userQuery","loading","largeImageUrl","getImageFetch","prevState","catch","finally","url","prevProp","length","scrollTo","top","document","documentElement","scrollHeight","behavior","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00c9a65a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default class SearchForm extends Component{\r\n  state = {\r\n    inputValue:''\r\n  }\r\n \r\n  handleInput=event=>{\r\n    this.setState({inputValue:event.target.value})\r\n  }\r\n\r\n  handleSubmit=event=>{\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue)\r\n    this.setState({inputValue:''})\r\n  }\r\n  render(){\r\n  return (\r\n  <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n    <button type=\"submit\" className=\"SearchForm-button\">\r\n      <span className=\"SearchForm-button-label\">Search</span>\r\n    </button>\r\n\r\n    <input\r\n      onChange={this.handleInput}\r\n      className=\"SearchForm-input\"\r\n      type=\"text\"\r\n      autoComplete=\"off\"\r\n      autoFocus\r\n      placeholder=\"Search images and photos\"\r\n    />\r\n  </form>\r\n  );\r\n  }\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n};","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SearchForm from \"./SearchForm\"\r\n\r\nexport default function Searchbar ({onSubmit}){\r\n  \r\n  return (\r\n    <header className=\"Searchbar\">\r\n  < SearchForm onSubmit={onSubmit} />\r\n</header>\r\n  );\r\n  \r\n}\r\n\r\nSearchForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n};","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://pixabay.com/api\"\r\n\r\n\r\nexport default function GetFetch(query, page=1, itemsPerPage=12){\r\n    try {\r\n       return axios.get(\r\n        // `/everything?q=${query}&from=2020-08-08&sortBy=publishedAt&apiKey=${process.env.REACT_APP_API_KEY}`\r\n        `/?key=${process.env.REACT_APP_API_KEY}&q=${query}&page=${page}&per_page=${itemsPerPage}&image_type=photo`\r\n      )\r\n      .then(resp=>resp.data.hits.map(({id,webformatURL,largeImageURL})=>({id,webformatURL,largeImageURL}))\r\n      )\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };","import React, { Component } from \"react\";\r\n\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nimport Loader from 'react-loader-spinner';\r\n\r\n export default class Spinner extends Component {\r\n    render() {\r\n\t return(\r\n\t  <Loader className=\"loader\"\r\n\t     type=\"Circles\"\r\n\t     color=\"#3f51b5\"\r\n\t     height={80}\r\n\t     width={80}\r\n\t     timeout={3000} //3 secs\r\n\r\n\t  />\r\n\t );\r\n    }\r\n }\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ImageGalleryItem ({ image, setLargeImage }){\r\n\r\n    const{webformatURL, largeImageURL} = image\r\n    return (\r\n      <li className='ImageGalleryItem'>\r\n        <img\r\n          src={webformatURL}\r\n          alt=\"super-gallery\"\r\n          className='ImageGalleryItem__image'\r\n          onClick={() => setLargeImage(largeImageURL)}\r\n        />\r\n      </li>\r\n    );\r\n  };\r\n  \r\n\r\n  ImageGalleryItem.propTypes = {\r\n    image: PropTypes.object.isRequired,\r\n    setLargeImage: PropTypes.func.isRequired,\r\n  };\r\n","import React from 'react';\r\nimport ImageGalleryItem from '../imageGalleryItem/ImageGalleryItem';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nexport default function ImageGallery({ images, setLargeImage }) {\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"ImageGallery\">\r\n        {images.map(image => (\r\n          <ImageGalleryItem\r\n            key={uuidv4()}\r\n            image={image}\r\n            setLargeImage={setLargeImage}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      webformatURL: PropTypes.string,\r\n      largeImageURL: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  setLargeImage: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Button ({ loadMore }){\r\n    return (\r\n      <button className='Button Button_loadmore' type=\"button\" onClick={loadMore}>\r\n        Load more\r\n      </button>\r\n    );\r\n  };\r\n  \r\n  Button.propTypes = {\r\n    loadMore: PropTypes.func.isRequired,\r\n  };","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ModalImage extends Component {\r\n      \r\n    componentDidMount() {\r\n      window.addEventListener('keydown', this.handleKey);\r\n    }\r\n  \r\n    handleClick = event => {\r\n      if (event.target.dataset.name !== 'overlay') {\r\n        return;\r\n      }\r\n      this.props.onClose();\r\n    };\r\n  \r\n    handleKey = event => {\r\n      if (event.code === 'Escape') {\r\n        this.props.onClose();\r\n      }\r\n    };\r\n  \r\n  \r\n    render() {\r\n      return (\r\n        <div\r\n          className='Overlay'\r\n          data-name=\"overlay\"\r\n          onClick={this.handleClick}\r\n        >\r\n          <div className='Modal' data-name=\"modal\">\r\n              <img src={this.props.src} alt=\"large\"/>\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  ModalImage.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    src:PropTypes.string.isRequired\r\n  \r\n  };","\nimport React, { Component } from 'react';\nimport Searchbar from './components/searchbar/Searchbar';\nimport GetFetch from './components/services/GetFetch';\nimport Spinner from './components/loader/Loader';\nimport ImageGallery from './components/imageGallery/ImageGallery';\nimport Button from './components/button/Button';\nimport ModalImage from './components/modal/Modal';\n\n\n\nexport default class App extends Component {\n  state = {\n    images: [],\n    userQuery: '',\n    page: 1,\n    itemsPerPage: 12,\n    loading: false,\n    largeImageUrl:null\n  };\n  componentDidUpdate(prevProp, prevState) {\n    const { images, userQuery} = this.state;\n    if (prevState.userQuery !== userQuery) {\n      this.setState({ loading: true });\n      this.getImageFetch()\n    }\n    if (prevState.images.length !== images.length) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  }\n getImageFetch=()=>{\n  const {userQuery, page, itemsPerPage } = this.state;\n  GetFetch(userQuery, page, itemsPerPage)\n  .then(image =>\n    this.setState(prevState => ({\n      images: [...prevState.images, ...image],\n      page: prevState.page + 1,\n    })),\n  )\n  .catch(error => console.log(error))\n  .finally(() => this.setState({ loading: false }));\n  }\n\n\n  handleSubmit = query => {\n    this.setState({\n      images: [],\n      userQuery: query,\n      page: 1,\n    });\n  };\n  setLargeImage = url => {\n    this.setState({ largeImageUrl: url });\n  };\n\n  render() {\n    const { images, loading, largeImageUrl,itemsPerPage } = this.state;\n    return (\n      <>\n        <Searchbar onSubmit={this.handleSubmit} />\n        {loading && <Spinner />}\n        {images.length>0 && <ImageGallery images={images} setLargeImage={this.setLargeImage}/>}\n        {images.length>=itemsPerPage && <Button loadMore={this.getImageFetch} />}\n        {largeImageUrl && (\n          <ModalImage onClose={() => this.setLargeImage(null)} src={largeImageUrl}/>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>{<App />}</React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}